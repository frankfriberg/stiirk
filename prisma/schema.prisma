// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Daily Workouts
model Daily {
  id             String       @id @default(cuid())
  slug           String       @unique
  startDate      DateTime
  maxReps        Int
  startReps      Int
  maxSets        Int
  repRatio       Int[]
  workouts       DailyWorkout @relation(fields: [dailyWorkoutId], references: [id])
  dailyWorkoutId String
}

model DailyWorkout {
  id                String          @id @default(cuid())
  name              String
  numberOfExercises Int
  exercises         DailyExercise[]
  daily             Daily[]
}

model DailyExercise {
  id            String         @id @default(cuid())
  max           Int
  min           Int
  split         Boolean
  exerciseId    String
  exercise      Exercise       @relation(fields: [exerciseId], references: [id])
  dailyWorkouts DailyWorkout[]
}

// Exercises
model Exercise {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  alias          String[]
  primary        String[]
  secondary      String
  force          String
  dailyExercises DailyExercise[]
  workoutRound   WorkoutRound[]
}

// Workouts
model Workout {
  id                String        @id @default(cuid())
  name              String
  slug              String        @unique
  timerCountdown    Boolean
  timerCountFrom    Int
  timerReadExercise Boolean
  setRest           Int
  sets              WorkoutSets[]
}

model WorkoutSets {
  id           String         @id @default(cuid())
  name         String
  exerciseRest Int
  tabat        Boolean
  iterations   Int
  workoutId    String?
  rounds       WorkoutRound[]
  workout      Workout?       @relation(fields: [workoutId], references: [id])
}

model WorkoutRound {
  id           String       @id @default(cuid())
  custom       String?
  type         String
  amount       Int
  split        Boolean
  splitBreak   Int
  splitTitle   String[]
  excludeRead  Boolean
  workoutSetId String?
  exerciseId   String?
  exercise     Exercise?    @relation(fields: [exerciseId], references: [id])
  workoutSet   WorkoutSets? @relation(fields: [workoutSetId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
